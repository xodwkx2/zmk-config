/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/outputs.h>
 #include <dt-bindings/zmk/bt.h>


 
 / {
     conditional_layers {
         compatible = "zmk,conditional-layers";
 
         adjust_layer {
             if-layers = <1 2>;
             then-layer = <3>;
         };
     };
 
     keymap {
         compatible = "zmk,keymap";
 
         default_layer {
            bindings = <
&kp ESC   &kp N1   &kp N2 &kp N3    &kp N4   &kp N5                                 &kp N6    &kp N7   &kp N8    &kp N9  &kp N0   &kp BSPC
&kp TAB   &kp Q    &kp W  &kp E     &kp R    &kp T                                  &kp Y     &kp U    &kp I     &kp O   &kp P    &kp MINUS
&kp LSHFT &kp A    &kp S  &kp D     &kp F    &kp G                                  &kp H     &kp J    &kp K     &kp L   &kp SEMI &kp SQT
&kp LCTRL &kp Z    &kp X  &kp C     &kp V    &kp B     &kp LS(LG S)   &kp LA(RET) &kp N     &kp M    &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                            &kp LGUI  &mo 1    &kp SPACE &kp RET          &kp RET     &kp SPACE &mo 2    &kp RALT
            >;
         };
         lower_layer {
         bindings = <
&trans    &kp LS(GRAVE)    &none             &none             &kp F4          &none                                     &kp KP_PLUS  &kp KP_MINUS   &kp ASTRK  &kp FSLH    &none      &kp DEL 
&kp none   &kp LC(LS KP_9)  &kp LC(LS KP_3)   &kp LA(H M M)     &kp LA(H M U)   &kp LC(LS T)                              &kp KP_7     &kp KP_8       &kp KP_9   &kp EQUAL   &none      &kp KP_NLCK  
&kp LSHFT  &kp LCTRL        &kp LC(LG t)      &kp LA(H A L)     &kp LA(H A C)   &none                                     &kp KP_4     &kp KP_5       &kp KP_6   &none       &none      &none    
&kp LCTRL  &kp LA(A T)      &kp LC(N5)        &kp LS(LG T)      &kp LC(LA V)    &none         &kp LA(H M U)     &none     &kp KP_1     &kp KP_2       &kp KP_3   &none       &none      &kp BSPC   
                                              &kp LGUI          &none           &kp LALT      &kp BSPC          &kp RET   &kp KP_0     &kp KP_DOT     &kp BSPC
            >;
         };
 
         raise_layer {
            bindings = <
&trans    &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                      &kp F6        &kp F7         &kp F8        &kp F9        &kp F10       &kp F11
&none     &kp LBKT &kp RBKT &out OUT_USB  &out OUT_BLE  &out TOG                    &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR 
&kp LSHFT &none    &none    &none         &none         &none                       &kp LA(H A L) &kp LA(H A C)  &none         &none         &kp UP        &none
&kp F7    &kp F8   &kp F9   &kp F10       &kp F11       &kp F12   &none   &none     &kp LA(H M M) &kp LA(H M U)  &none         &kp LEFT      &kp DOWN      &kp RIGHT
                            &trans        &none         &kp LALT  &none   &none     &none         &none          &none
            >;
         };
 
         adjust_layer {
             bindings = <
 &trans  &none     &none   &none     &none     &none                        &none      &none     &none      &none                 &none                  &none
 &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
 &trans  &kp N1    &kp N2  &kp N3    &kp N4    &kp N5                       &kp N6     &kp N7    &kp N8     &kp N9                &kp N0                 &trans
 &trans  &trans    &trans  &trans    &trans    &trans     &trans    &trans  &trans     &trans    &trans     &trans                &trans                 &trans
                           &trans    &trans    &trans     &trans    &trans  &trans     &trans    &trans
             >;
         };
     };
 };
